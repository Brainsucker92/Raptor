// Decompiled by Jad v1.5.8c. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   SVGToImageAntTask.java

package com.kitfox.svg.app.ant;

import com.kitfox.svg.SVGCache;
import com.kitfox.svg.SVGUniverse;
import com.kitfox.svg.app.beans.SVGIcon;
import com.kitfox.svg.xml.ColorTable;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import org.apache.tools.ant.*;
import org.apache.tools.ant.types.FileSet;

public class SVGToImageAntTask extends Task
{

    public SVGToImageAntTask()
    {
        filesets = new Vector();
        verbose = false;
        format = "png";
        backgroundColor = null;
        width = -1;
        height = -1;
        antiAlias = true;
        interpolation = "bicubic";
        clipToViewBox = false;
        sizeToFit = true;
    }

    public String getFormat()
    {
        return format;
    }

    public void setFormat(String format)
    {
        this.format = format;
    }

    public void setBackgroundColor(String bgColor)
    {
        backgroundColor = ColorTable.parseColor(bgColor);
    }

    public void setHeight(int height)
    {
        this.height = height;
    }

    public void setWidth(int width)
    {
        this.width = width;
    }

    public void setAntiAlias(boolean antiAlias)
    {
        this.antiAlias = antiAlias;
    }

    public void setInterpolation(String interpolation)
    {
        this.interpolation = interpolation;
    }

    public void setSizeToFit(boolean sizeToFit)
    {
        this.sizeToFit = sizeToFit;
    }

    public void setClipToViewBox(boolean clipToViewBox)
    {
        this.clipToViewBox = clipToViewBox;
    }

    public void setVerbose(boolean verbose)
    {
        this.verbose = verbose;
    }

    public void setDestDir(File destDir)
    {
        this.destDir = destDir;
    }

    public void addFileset(FileSet set)
    {
        filesets.add(set);
    }

    public void execute()
    {
        if(verbose)
            log("Building SVG images");
        for(Iterator it = filesets.iterator(); it.hasNext();)
        {
            FileSet fs = (FileSet)it.next();
            FileScanner scanner = fs.getDirectoryScanner(getProject());
            String files[] = scanner.getIncludedFiles();
            try
            {
                File basedir = scanner.getBasedir();
                if(verbose)
                    log("Scaning " + basedir);
                int i = 0;
                while(i < files.length) 
                {
                    translate(basedir, files[i]);
                    i++;
                }
            }
            catch(Exception e)
            {
                throw new BuildException(e);
            }
        }

    }

    private void translate(File baseDir, String shortName)
        throws BuildException
    {
        File source = new File(baseDir, shortName);
        if(verbose)
            log("Reading file: " + source);
        Matcher matchName = Pattern.compile("(.*)\\.svg", 2).matcher(shortName);
        if(matchName.matches())
            shortName = matchName.group(1);
        shortName = shortName + "." + format;
        SVGIcon icon = new SVGIcon();
        icon.setSvgURI(source.toURI());
        icon.setAntiAlias(antiAlias);
        if(interpolation.equals("nearest neighbor"))
            icon.setInterpolation(0);
        else
        if(interpolation.equals("bilinear"))
            icon.setInterpolation(1);
        else
        if(interpolation.equals("bicubic"))
            icon.setInterpolation(2);
        int iconWidth = width <= 0 ? icon.getIconWidth() : width;
        int iconHeight = height <= 0 ? icon.getIconHeight() : height;
        icon.setClipToViewbox(clipToViewBox);
        icon.setPreferredSize(new Dimension(iconWidth, iconHeight));
        icon.setScaleToFit(sizeToFit);
        BufferedImage image = new BufferedImage(iconWidth, iconHeight, 2);
        Graphics2D g = image.createGraphics();
        if(backgroundColor != null)
        {
            g.setColor(backgroundColor);
            g.fillRect(0, 0, iconWidth, iconHeight);
        }
        g.setClip(0, 0, iconWidth, iconHeight);
        icon.paintIcon(null, g, 0, 0);
        g.dispose();
        File outFile = destDir != null ? new File(destDir, shortName) : new File(baseDir, shortName);
        if(verbose)
            log("Writing file: " + outFile);
        try
        {
            ImageIO.write(image, format, outFile);
        }
        catch(IOException e)
        {
            log("Error writing image: " + e.getMessage());
            throw new BuildException(e);
        }
        SVGCache.getSVGUniverse().clear();
    }

    private Vector filesets;
    boolean verbose;
    File destDir;
    private String format;
    Color backgroundColor;
    int width;
    int height;
    boolean antiAlias;
    String interpolation;
    boolean clipToViewBox;
    boolean sizeToFit;
}
